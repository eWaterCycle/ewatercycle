################################################################################
ewatercycle
################################################################################

A Python package for running hydrological models.

.. image:: https://github.com/eWaterCycle/ewatercycle/actions/workflows/ci.yml/badge.svg
    :target: https://github.com/eWaterCycle/ewatercycle/actions/workflows/ci.yml

.. image:: https://sonarcloud.io/api/project_badges/measure?project=eWaterCycle_ewatercycle&metric=alert_status
    :target: https://sonarcloud.io/dashboard?id=eWaterCycle_ewatercycle

.. image:: https://sonarcloud.io/api/project_badges/measure?project=eWaterCycle_ewatercycle&metric=coverage
    :target: https://sonarcloud.io/component_measures?id=eWaterCycle_ewatercycle&metric=coverage

.. image:: https://readthedocs.org/projects/ewatercycle/badge/?version=latest
    :target: https://ewatercycle.readthedocs.io/en/latest/?badge=latest
    :alt: Documentation Status

.. image:: https://img.shields.io/badge/fair--software.eu-%E2%97%8F%20%20%E2%97%8F%20%20%E2%97%8B%20%20%E2%97%8F%20%20%E2%97%8B-orange
    :target: https://fair-software.eu


The eWatercycle package makes it easier to use hydrological models without having intimate knowledge about how to install and run it.

* Uses container for running model in a isolated and portable way with `grpc4bmi <https://github.com/eWaterCycle/grpc4bmi>`_
* Rain and sunshine required for input of the model can be generated by the package using `ESMValTool <https://www.esmvaltool.org/>`_
* Observation data from `GRDC or USGS <https://ewatercycle.readthedocs.io/en/latest/observations.html>`_
* Exposes `simple interface <https://ewatercycle.readthedocs.io/en/latest/examples/ewatercycle_api_notebook.html>`_ to quickly get up and running

Install
-------

The ewatercycle package needs some geospatial non-python packages to generate
forcing data. It is preferred to create a Conda environment to install those
dependencies:

.. code-block:: bash

    wget https://raw.githubusercontent.com/eWaterCycle/ewatercycle/master/environment.yml
    conda env create --file environment.yml
    conda activate ewatercycle

The ewatercycle package is installed with

.. code-block:: bash

    pip install git+https://github.com/eWaterCycle/ewatercycle.git#egg=ewatercycle


Besides installing software you will need to create a configuration file, download several data sets and get container images.
See the `system setup chapter <https://ewatercycle.readthedocs.org/en/latest/system_setup.html>`_ for instructions.

Usage
-----

To generate forcing for a hydrological model in this case PCRGlobWB, run it and produce a hydrograph:

.. code-block:: python

    import ewatercycle.models
    import ewatercycle.forcing
    import ewatercycle.observation.grdc
    import ewatercycle.parameter_sets

    parameter_set = ewatercycle.parameter_sets.get_parameter_set('pcrglobwb_example_case')

    forcing = forcing.generate(
        model='pcrglobwb',
        dataset='ERA5',
        startyear=1991,
        endyear=1991,
        shape='Meuse/Meuse.shp',
        model_specific_options=dict(
            startyear_climatology=1990,
            endyear_climatology=1990,
        )
    )

    model = ewatercycle.models.PCRGlobWB(version="setters", parameter_set=parameter_set, forcing=forcing)

    cfg_file, cfg_dir = model.setup(max_spinups_in_years=1)

    model.initialize(cfg_file)

    observations_df, station_info = ewatercycle.observation.grdc.get_grdc_data(
        station_id=4147380,
        start_date=model.start_time_as_isostr,
        end_date=model.end_time_as_isostr,
    )
    station_lon = station_info['grdc_longitude_in_arc_degree']
    station_lat = station_info['grdc_latitude_in_arc_degree']

    simulated_discharge = []
    timestamps = []
    while (model.time < model.end_time):
        model.update()
        discharge = model.get_value_at_coords('discharge', lat=[station_lat], lon=[station_lon])
        simulated_discharge.append(discharge)
        timestamps.append(model.time_as_datetime)
    simulated_discharge_df = pd.DataFrame([simulated_discharge], index=pd.to_datetime(timestamps), columns=['discharge'])

    ewatercycle.analysis.hydrograph(simulated_discharge_df.join(observations_df), reference='streamflow')

More examples can be found in the `documentation <https://ewatercycle.readthedocs.io>`_.

Contributing
************

If you want to contribute to the development of ewatercycle package,
have a look at the `contribution guidelines <CONTRIBUTING.rst>`_.

License
*******

Copyright (c) 2018, Netherlands eScience Center & Delft University of Technology

Apache Software License 2.0
